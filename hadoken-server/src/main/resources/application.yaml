spring:
  application:
    name: hadoken-server
  main:
    allow-bean-definition-overriding: true
  freemarker:
    check-template-location: false
  profiles:
    active: dev
  jackson:
    time-zone: GMT+8
  data:
    redis:
      repositories:
        enabled: false

  # 配置 Jpa
  jpa:
    hibernate:
      ddl-auto: none
    open-in-view: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect


  datasource:
    druid:
      db-type: com.alibaba.druid.pool.DruidDataSource
      #driverClassName: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
      driverClassName: com.mysql.jdbc.driver
      url: jdbc:log4jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:hadoken}?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useSSL=false&createDatabaseIfNotExist=true
      username: ${DB_USER:root}
      password: ${DB_PWD:root}
      # 初始连接数
      initial-size: 5
      # 最小连接数
      min-idle: 15
      # 最大连接数
      max-active: 30
      # 超时时间(以秒数为单位)
      remove-abandoned-timeout: 180
      # 获取连接超时时间
      max-wait: 3000
      # 连接有效性检测时间
      time-between-eviction-runs-millis: 60000
      # 连接在池中最小生存的时间
      min-evictable-idle-time-millis: 300000
      # 连接在池中最大生存的时间
      max-evictable-idle-time-millis: 900000
      # 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除
      test-while-idle: true
      # 指明是否在从池中取出连接前进行检验,如果检验失败, 则从池中去除连接并尝试取出另一个
      test-on-borrow: true
      # 是否在归还到池中前进行检验
      test-on-return: false
      # 检测连接是否有效
      validation-query: select 1
      # 配置监控统计
      webStatFilter:
        enabled: true
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: false
      filter:
        stat:
          enabled: true
          # 记录慢SQL
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true



hadoken:
  info:
    version: 1.0.0
    base-package: pers.guangjian.hadoken
  web:
    admin-api:
      prefix: /admin-api
      controller: '**.controller.admin.**'
    app-api:
      prefix: /app-api
      controller: '**.controller.app.**'
    admin-ui:
      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址
  swagger:
    title: 管理后台
    description: 提供管理员管理的所有功能
    version: ${hadoken.info.version}
    base-package: ${hadoken.info.base-package}
  captcha:
    timeout: 5m
    width: 160
    height: 60
  codegen:
    base-package: ${hadoken.info.base-package}
    db-schemas: ${spring.datasource.dynamic.datasource.master.name}
  error-code: # 错误码相关配置项
    constants-class-list:
      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants
      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants
      - cn.iocoder.yudao.module.member.enums.ErrorCodeConstants
      - cn.iocoder.yudao.module.pay.enums.ErrorCodeConstants
      - cn.iocoder.yudao.module.system.enums.ErrorCodeConstants
      - cn.iocoder.yudao.module.tool.enums.ErrorCodeConstants
  tenant: # 多租户相关配置项
    tables: # 配置需要开启多租户的表；如果实体已经继承 TenantBaseDO 类，则无需重复配置
  sms-code: # 短信验证码相关的配置项
    expire-times: 10m
    send-frequency: 1m
    send-maximum-quantity-per-day: 10
    begin-code: 9999 # 这里配置 9999 的原因是，测试方便。
    end-code: 9999 # 这里配置 9999 的原因是，测试方便。
